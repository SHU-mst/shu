local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer
local UserInputService = game:GetService("UserInputService")

local isSkeletonESP = false -- Variable to track skeleton ESP status
local skeletons = {} -- Table to store skeleton models for easy management

local function createSkeleton(player)
    if player ~= localPlayer and player.Character then
        -- Create a new model for the skeleton
        local skeletonModel = Instance.new("Model")
        skeletonModel.Name = player.Name .. "_Skeleton"
        skeletonModel.Parent = workspace

        -- Create a simple skeleton structure using Parts
        local head = Instance.new("Part")
        head.Size = Vector3.new(1, 1, 1) -- Adjust size as needed
        head.Color = Color3.new(1, 1, 1) -- White color for the skeleton
        head.Anchored = true
        head.CanCollide = false
        head.Parent = skeletonModel

        -- Create other body parts (torso, arms, legs)
        local torso = Instance.new("Part")
        torso.Size = Vector3.new(1, 2, 0.5)
        torso.Color = Color3.new(1, 1, 1)
        torso.Anchored = true
        torso.CanCollide = false
        torso.Parent = skeletonModel

        local leftArm = Instance.new("Part")
        leftArm.Size = Vector3.new(0.5, 1, 0.5)
        leftArm.Color = Color3.new(1, 1, 1)
        leftArm.Anchored = true
        leftArm.CanCollide = false
        leftArm.Parent = skeletonModel

        local rightArm = leftArm:Clone()
        rightArm.Parent = skeletonModel

        local leftLeg = Instance.new("Part")
        leftLeg.Size = Vector3.new(0.5, 1, 0.5)
        leftLeg.Color = Color3.new(1, 1, 1)
        leftLeg.Anchored = true
        leftLeg.CanCollide = false
        leftLeg.Parent = skeletonModel

        local rightLeg = leftLeg:Clone()
        rightLeg.Parent = skeletonModel

        -- Position the skeleton parts relative to the character
        head.Position = player.Character.Head.Position + Vector3.new(0, 2, 0)
        torso.Position = player.Character:WaitForChild("Torso").Position + Vector3.new(0, 1, 0)
        leftArm.Position = torso.Position + Vector3.new(-1, 0, 0)
        rightArm.Position = torso.Position + Vector3.new(1, 0, 0)
        leftLeg.Position = torso.Position + Vector3.new(-0.5, -2, 0)
        rightLeg.Position = torso.Position + Vector3.new(0.5, -2, 0)

        -- Store the skeleton model in the skeletons table
        skeletons[player] = skeletonModel
    end
end

local function removeSkeleton(player)
    if skeletons[player] then
        skeletons[player]:Destroy() -- Remove the skeleton model
        skeletons[player] = nil -- Clear from the skeletons table
    end
end

-- Toggle skeleton ESP on/off
local function toggleSkeletonESP()
    isSkeletonESP = not isSkeletonESP -- Toggle the state
    if isSkeletonESP then
        -- Create skeleton for all existing players
        for _, player in ipairs(Players:GetPlayers()) do
            createSkeleton(player)
        end
        -- Connect to player joining event to create skeleton for new players
        Players.PlayerAdded:Connect(function(player)
            player.CharacterAdded:Wait() -- Wait for the character to be added
            createSkeleton(player)
        end)
    else
        -- Remove skeletons from all players
        for player, skeleton in pairs(skeletons) do
            removeSkeleton(player)
        end
        skeletons = {} -- Clear the skeletons table
    end
end

-- Handle user input
UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
    if not gameProcessedEvent and input.UserInputType == Enum.UserInputType.Keyboard then
        if input.KeyCode == Enum.KeyCode.F then
            toggleSkeletonESP() -- Call the toggle function on pressing F
        end
    end
end)

-- Create skeletons for existing players on startup
for _, player in ipairs(Players:GetPlayers()) do
    createSkeleton(player)
end

-- Create skeletons for new players when they join
Players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Wait() -- Wait for the character to be added
    if isSkeletonESP then
        createSkeleton(player)
    end
end)

-- Infinite loop to continuously update skeleton positions
while true do
    wait(1) -- Wait for 1 second between iterations to avoid freezing the game

    if isSkeletonESP then
        for player, skeleton in pairs(skeletons) do
            if player.Character and player.Character:FindFirstChild("Torso") then
                -- Update the skeleton's position to match the player's character
                local torso = player.Character:WaitForChild("Torso") -- Wait for the Torso to be available
                skeleton:SetPrimaryPartCFrame(torso.CFrame)
            end
        end
    end
end
